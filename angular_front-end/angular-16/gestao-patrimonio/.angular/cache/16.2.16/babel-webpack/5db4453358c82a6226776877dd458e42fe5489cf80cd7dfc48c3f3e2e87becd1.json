{"ast":null,"code":"import { environment } from 'src/environments/environments';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.http = http;\n    this.urlApiLocal = environment.urlApiLocal + 'login';\n  }\n  logar(usuario) {\n    return this.http.post(this.urlApiLocal, usuario, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).subscribe({\n      next: res => {\n        // Mostre a mensagem da resposta JSON\n        if (res && res.message) {\n          alert(res.message);\n        } else {\n          alert('Login realizado, mas sem mensagem específica.');\n        }\n      },\n      error: error => {\n        console.error('Erro no login:', error);\n        if (error.error && error.error.error) {\n          alert(error.error.error); // Mostra mensagem de erro retornada pela API\n        } else {\n          alert('Erro ao realizar login.');\n        }\n      }\n    });\n  }\n  static {\n    this.ɵfac = function LoginService_Factory(t) {\n      return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoginService,\n      factory: LoginService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","LoginService","constructor","http","urlApiLocal","logar","usuario","post","headers","subscribe","next","res","message","alert","error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\workspace_developer\\github\\gestao-patrimonial\\angular_front-end\\angular-16\\gestao-patrimonio\\src\\app\\services\\login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environments';\nimport { HttpClient } from '@angular/common/http';\nimport { Usuario } from '../model/usuario';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private urlApiLocal = environment.urlApiLocal + 'login';\n  constructor(private http: HttpClient) { \n\n  }\n\n  logar(usuario: Usuario) {\n    return this.http.post<any>(this.urlApiLocal, usuario, {\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    }).subscribe({\n      next: (res) => {\n        // Mostre a mensagem da resposta JSON\n        if (res && res.message) {\n          alert(res.message);\n        } else {\n          alert('Login realizado, mas sem mensagem específica.');\n        }\n      },\n      error: (error) => {\n        console.error('Erro no login:', error);\n        if (error.error && error.error.error) {\n          alert(error.error.error); // Mostra mensagem de erro retornada pela API\n        } else {\n          alert('Erro ao realizar login.');\n        }\n      }\n    });\n  }\n  \n  \n\n}\n\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,+BAA+B;;;AAO3D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,WAAW,GAAGJ,WAAW,CAACI,WAAW,GAAG,OAAO;EAGvD;EAEAC,KAAKA,CAACC,OAAgB;IACpB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,IAAI,CAACH,WAAW,EAAEE,OAAO,EAAE;MACpDE,OAAO,EAAE;QACP,cAAc,EAAE;;KAEnB,CAAC,CAACC,SAAS,CAAC;MACXC,IAAI,EAAGC,GAAG,IAAI;QACZ;QACA,IAAIA,GAAG,IAAIA,GAAG,CAACC,OAAO,EAAE;UACtBC,KAAK,CAACF,GAAG,CAACC,OAAO,CAAC;SACnB,MAAM;UACLC,KAAK,CAAC,+CAA+C,CAAC;;MAE1D,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;QACtC,IAAIA,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACA,KAAK,EAAE;UACpCD,KAAK,CAACC,KAAK,CAACA,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;SAC3B,MAAM;UACLD,KAAK,CAAC,yBAAyB,CAAC;;MAEpC;KACD,CAAC;EACJ;;;uBA9BWZ,YAAY,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZlB,YAAY;MAAAmB,OAAA,EAAZnB,YAAY,CAAAoB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}